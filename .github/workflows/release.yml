name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install ldid for macOS code signing
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential
        git clone https://github.com/ProcursusTeam/ldid.git
        cd ldid
        make
        sudo cp ldid /usr/local/bin/
        cd ..
        rm -rf ldid

    - name: Build binaries
      run: npm run build:all

    - name: Sign macOS binaries
      run: |
        cd dist
        # Sign macOS binaries with ad-hoc signature
        if [ -f "time-tracker-9000-macos-x64" ]; then
          ldid -S time-tracker-9000-macos-x64
          echo "Signed macOS x64 binary"
        fi
        if [ -f "time-tracker-9000-macos-arm64" ]; then
          ldid -S time-tracker-9000-macos-arm64
          echo "Signed macOS ARM64 binary"
        fi

    - name: Create archives
      run: |
        cd dist
        # Create archives for each platform
        tar -czf time-tracker-9000-linux-x64.tar.gz time-tracker-9000-linux-x64
        tar -czf time-tracker-9000-macos-x64.tar.gz time-tracker-9000-macos-x64
        tar -czf time-tracker-9000-macos-arm64.tar.gz time-tracker-9000-macos-arm64
        zip time-tracker-9000-windows-x64.zip time-tracker-9000-win-x64.exe

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
          dist/*.tar.gz
          dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: dist

    - name: Generate version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          # Generate version from package.json and commit SHA
          VERSION=$(node -p "require('./package.json').version")
          SHORT_SHA=${GITHUB_SHA::7}
          echo "tag=v${VERSION}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        files: |
          dist/*.tar.gz
          dist/*.zip
        generate_release_notes: true
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test build
      run: npm run build
